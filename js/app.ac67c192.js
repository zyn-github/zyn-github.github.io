(function(n){function e(e){for(var r,i,o=e[0],l=e[1],c=e[2],u=0,h=[];u<o.length;u++)i=o[u],a[i]&&h.push(a[i][0]),a[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);p&&p(e);while(h.length)h.shift()();return s.push.apply(s,c||[]),t()}function t(){for(var n,e=0;e<s.length;e++){for(var t=s[e],r=!0,o=1;o<t.length;o++){var l=t[o];0!==a[l]&&(r=!1)}r&&(s.splice(e--,1),n=i(i.s=t[0]))}return n}var r={},a={app:0},s=[];function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.m=n,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"===typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)i.d(t,r,function(e){return n[e]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/";var o=window["webpackJsonp"]=window["webpackJsonp"]||[],l=o.push.bind(o);o.push=e,o=o.slice();for(var c=0;c<o.length;c++)e(o[c]);var p=l;s.push([0,"chunk-vendors"]),t()})({0:function(n,e,t){n.exports=t("56d7")},"56d7":function(n,e,t){"use strict";t.r(e);t("a481"),t("7f7f"),t("ac6a"),t("cadf"),t("551c"),t("f751"),t("097d");var r=t("2b0e"),a=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{attrs:{id:"app"}},[t("div",{staticClass:"left-nav"},n._l(n.viewList,function(e,r){var a=e.title;return t("h6",{key:r,staticClass:"nav-items",class:{active_nav:r===n.currentView},on:{click:function(e){return n.switchNav(r)}}},[n._v(n._s(a))])}),0),t("div",{staticClass:"right-main"},[t(n.viewList[n.currentView].docs,{tag:"component"})],1)])},s=[],i={name:"app",components:{},data:function(){return{currentView:0,viewList:window.$ViewList}},methods:{switchNav:function(n){this.currentView=n}},created:function(){console.log(this.viewList)}},o=i,l=(t("5c0b"),t("2877")),c=Object(l["a"])(o,a,s,!1,null,null,null),p=c.exports,u=(t("28a5"),function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)}),h=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("h3",{attrs:{id:"qian-duan-shu-ju-xiao-yan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#qian-duan-shu-ju-xiao-yan","aria-hidden":"true"}},[n._v("¶")]),n._v(" 前端数据校验")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// 借助 schema-typed 模块来实现\nnpm install schema-typed --save\n")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("\n// 实例用法\n\nimport { SchemaModel, StringType, DateType, NumberType } from 'schema-typed';\n\nconst model = SchemaModel({\n  username: StringType().isRequired('用户名不能为空'),\n  email: StringType().isEmail('请输入正确的邮箱'),\n  age: NumberType('年龄应该是一个数字').range(19, 31, '年龄应该在 19 到 31 岁之间')\n});\n\nconst Result = model.check({\n  username: 'zyn',\n  email: 'zyn@qq.com',\n  age: 40\n});\n\nconsole.log(Result);\n\n")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// Result 返回结构是:\n{\n    username: { hasError: false },\n    email: { hasError: false },\n    age: { hasError: true, errorMessage: '年龄应该在 19 到 31 岁之间' }\n}\n")])]),t("h3",{attrs:{id:"duo-chong-yan-zheng"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#duo-chong-yan-zheng","aria-hidden":"true"}},[n._v("¶")]),n._v(" 多重验证")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("StringType()\n  .minLength(20, '不能少于 20 个字符')\n  .maxLength(30, '不能大于 30 个字符')\n  .isRequired('该字段不能为空');\n\n")])]),t("h3",{attrs:{id:"zi-ding-yi-yan-zheng"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zi-ding-yi-yan-zheng","aria-hidden":"true"}},[n._v("¶")]),n._v(" 自定义验证")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("const model = SchemaModel({\n  field1: StringType().addRule((value, data) => {\n    return /^[1-9][0-9]{3}\\s?[a-zA-Z]{2}$/.test(value);\n  }, '请输入合法字符'),\n  field2: StringType().pattern(/^[1-9][0-9]{3}\\s?[a-zA-Z]{2}$/, '请输入合法字符')\n});\n\nmodel.check({ field1: '', field2: '' });\n\n/**\n{\n  field1: {\n    hasError: true,\n    errorMessage: '请输入合法字符'\n  },\n  field2: {\n    hasError: true,\n    errorMessage: '请输入合法字符'\n  }\n};\n**/\n\n")])]),t("h3",{attrs:{id:"zi-duan-zhi-jian-guan-lian-xing-yan-zheng"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zi-duan-zhi-jian-guan-lian-xing-yan-zheng","aria-hidden":"true"}},[n._v("¶")]),n._v(" 字段之间关联性验证")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("const model = SchemaModel({\n  password1: StringType().isRequired('该字段不能为空'),\n  password2: StringType().addRule((value, data) => {\n    if (value !== data.password1) {\n      return false;\n    }\n    return true;\n  }, '两次密码不一致')\n});\n\nmodel.check({ password1: '123456', password2: 'root' });\n\n/**\n{\n  password1: { hasError: false },\n  password2: {\n    hasError: true,\n    errorMessage: '两次密码不一致'\n  }\n};\n**/\n\n")])]),t("h3",{attrs:{id:"can-kao-lian-jie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#can-kao-lian-jie","aria-hidden":"true"}},[n._v("¶")]),n._v(" 参考链接")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// 参考链接 \nhttps://www.npmjs.com/package/schema-typed\n")])])])}],d={},g=Object(l["a"])(d,u,h,!1,null,null,null),m=g.exports,v=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},f=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("h3",{attrs:{id:".eslintrc.js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#.eslintrc.js","aria-hidden":"true"}},[n._v("¶")]),n._v(" .eslintrc.js")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v('// 0 表示忽略问题，等同于"off";\n// 1 表示给出警告，等同于"warn";\n// 2 表示直接报错，等同于"error"。\n')])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("\n// 保存代码，立即执行语法检测 vue.config.js配置如下：\n\nmodule.exports = {\n    lintOnSave: process.env.NODE_ENV !== 'production',\n    devServer: {\n            overlay: { warnings: true, errors: true }\n    }\n}\n\n")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v('module.exports = {\n    root: true,\n    env: {\n        node: true,\n        browser: true,\n        es6: true,\n    },\n    \'extends\': [\n        \'plugin:vue/essential\',\n        \'eslint:recommended\'\n    ],\n    rules: {\n        \'no-console\': process.env.NODE_ENV === \'production\' ? \'error\' : \'off\',\n        \'no-debugger\': process.env.NODE_ENV === \'production\' ? \'error\' : \'off\',\n        \'no-alert\': 2, //禁止使用 alert 弹窗\n        "no-unused-vars": [0, { // 定义过的变量必须使用\n            "vars": "local",\n            "args": "none"\n        }],\n        "semi": [2, "always"], // 必须在结尾添加分号\n        \'no-multiple-empty-lines\': [ // 禁止出现超过三行的连续空行\n            \'error\',\n            {\n                max: 3,\n                maxEOF: 1,\n                maxBOF: 1\n            }\n        ],\n        "no-constant-condition": 2,\n        \'no-empty\': [ // 禁止出现空代码块，允许 catch 为空代码块\n            \'error\',\n            {\n                allowEmptyCatch: true\n            }\n        ],\n        "no-empty-character-class": 2, // 禁止在正则表达式中使用空的字符集 []\n        "no-empty-label": 0,\n        "no-eq-null": 2, \n        "no-eval": 1, // 禁止使用 eval\n        "eqeqeq": 2, // 必须使用===或 !==，禁止使用 == 或\n        "indent": [2, 4], // 一个缩进必须用四个空格替代\n        "init-declarations": 2, // 先定义后赋值很常见\n        "key-spacing": [0, { "beforeColon": false, "afterColon": true }], // 对象字面量中冒号前面禁止有空格，后面必须有空格\n        "max-depth": [1, 4], 代码块嵌套的深度禁止超过 4 层\n        "prefer-const": 1, // 申明后不再被修改的变量必须使用 const 来申明\n        "quotes": [2, "single"], // 使用单引号\n        "no-sparse-arrays": 2, // 禁止在数组中出现连续的逗号，如 let foo = [,,]\n    },\n    parserOptions: {\n        parser: \'babel-eslint\'\n    }\n}\n')])])])}],_={},y=Object(l["a"])(_,v,f,!1,null,null,null),j=y.exports,b=t("b58c"),x=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},w=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("h3",{attrs:{id:"js-gong-ju-lei-fang-fa-ji-he"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-gong-ju-lei-fang-fa-ji-he","aria-hidden":"true"}},[n._v("¶")]),n._v(" js工具类方法集合")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("const utils = {\n    // 检查数据类型\n    checkType(data, type) {\n        return Object.prototype.toString.call(data).slice(8, -1) === type;\n    },\n    // 将Object对象，转换成GET参数\n    makeParam(obj) {\n        if (!this.checkType(obj, 'Object')) return '';\n        let result = '?';\n        const list = Object.keys(obj);\n        list.forEach((key, index) => {\n            result += key + '=' + obj[key] + (index === list.length - 1 ? '' : '&');\n        });\n        return result;\n    },\n    // 倒计时进行补0\n    fix(num, length = 2) {\n        const str = new Array(length + 1).join('0') + num;\n        return num.toString().length "),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("< "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("length")]),n._v(" ? "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("str.slice")]),n._v("("),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("-length")]),n._v(") "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v(":")]),n._v(" '' + "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("num")]),n._v(";\n    },\n    // 时间如期转换\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("timeCovert")]),n._v("("),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("time")]),n._v(") {\n        // "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("2019-07-32")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("13:34:56")]),n._v(" =>")]),n._v(" 2019/07/32 13:34:56\n        // eslint-disable-next-line\n        return time.toString().replace(/\\-/g, '/');\n    },\n    // 检测是否是微信换将\n    isWeiXin() {\n        return navigator.userAgent.indexOf('MicroMessenger') > -1;\n    },\n    // 获取Dom节点\n    jsQuery(el) {\n        return document.querySelector(el);\n    },\n    // 获取地址栏参数\n    getQueryParam(name) {\n        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)');\n        var r = window.location.search.substr(1).match(reg);\n        // eslint-disable-next-line\n        if (r != null) return unescape(r[2]);\n        return null;\n    },\n    // 获取订单随机数\n    getRandomCode() {\n        let outTradeNo = '';\n        for (let i = 0; i "),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("< "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("6")]),n._v("; "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("i")]),n._v("++) //"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("6")]),n._v("位随机数，用以加在时间戳后面。\n        {\n            "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("outTradeNo")]),n._v(" += "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[n._v("Math.floor(Math.random()")]),n._v(" * "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("10")]),n._v(");\n        }\n        "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("return")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("outTradeNo")]),n._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[n._v("new")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("Date")]),n._v("()"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v(".getTime")]),n._v("() + "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("outTradeNo")]),n._v(";\n    }\n};\n"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("export")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("default")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("utils")]),n._v(";\n")])])]),t("h3",{attrs:{id:"javascript-zi-ding-yi-shi-jian"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-zi-ding-yi-shi-jian","aria-hidden":"true"}},[n._v("¶")]),n._v(" javascript 自定义事件")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// javascript 自定义事件\nwindow.onload = function () {\n    // 方法一\n    document.addEventListener('zyn', function () {\n        console.log('自定义事件被触发了');\n    });\n    // 创建\n    const evt = document.createEvent('HTMLEvents'); // HTMLEvents MouseEvents UIEvents\n    // 初始化\n    evt.initEvent('zyn', false, false);\n    // 触发\n    document.dispatchEvent(evt);\n\n\n\n\n    // 方法二\n    document.querySelector('#kw').addEventListener('zyn1', function () {\n        console.log('自定义事件被触发了');\n    });\n    /**\n        * @createEvent\n        * @param {type}\n        * @type {\"MouseEvents\", \"MutationEvents\", \"HTMLEvents\"}\n        * @link https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createEvent\n        */\n\n\n    const evt1 = document.createEvent('HTMLEvents'); // HTMLEvents MouseEvents UIEvents\n    // 初始化\n    /**\n        *  @event initEvent\n        *  @param {eventType,canBubble,cancelable}\n        *  @eventType 字符串值。事件的类型\n        *  @canBubble 事件是否起泡\n        *  @cancelable 是否可以用 preventDefault() 方法取消事件。\n        */\n    evt1.initEvent('zyn1', false, false);\n    /**\n        * @dispatchEvent\n        * @param {evt}\n        * @evt 必需。要分派的 Event 对象。\n        */\n    document.querySelector('#kw').dispatchEvent(evt);\n}\n")])])])}],C={},k=Object(l["a"])(C,x,w,!1,null,null,null),E=k.exports,T=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},S=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("p",[n._v("element遇到问题")])])}],P={},D=Object(l["a"])(P,T,S,!1,null,null,null),z=D.exports,N=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},O=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("h3",{attrs:{id:"cache-control-private-public-no-cache-xiang-xi-jie-shao"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control-private-public-no-cache-xiang-xi-jie-shao","aria-hidden":"true"}},[n._v("¶")]),n._v(" Cache-Control: private, public no-cache 详细介绍")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("    // tips:强缓存执行的优先级(pragma > cache-control > expires。)\n    // 协商缓存(协商缓存由于需要向服务器发送一次请求，所以相比于强缓存来收收益更低，缓存资源体积越大，收益越高。)\n\n")])])])}],$={},q=Object(l["a"])($,N,O,!1,null,null,null),L=q.exports,M=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},A=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("h3",{attrs:{id:"ce-shi-liu-lan-qi-huan-cun-cache-control"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ce-shi-liu-lan-qi-huan-cun-cache-control","aria-hidden":"true"}},[n._v("¶")]),n._v(" 测试浏览器缓存（ Cache-Control ）")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// 测试Server端 express\n\n// Cache-Control 设置缓存\nconst express = require('express');\nconst fs = require('fs');\nconst path = require('path');\n\napp.get('/*.css', function(req, res) {\n    /**\n     *  @title 设置缓存 (在HTTP/1.0)\n     *  @private 在服务器设置了private比如Cache-Control: private , max-age=60的情况下，\n     表示只有用户的浏览器可以缓存private响应，不允许任何中继Web代理对其进行缓存\n     *  @public 如果设置了public，表示该响应可以再浏览器或者任何中继的Web代理中缓存，\n     public是默认值，即Cache-Control: max-age=60等同于Cache-Control: public , max-age=60。\n    *  @Expires Expires 表示存在时间，允许客户端在这个时间之前不去检查（发请求），\n    等同max-age的效果 但是如果同时存在，则被Cache-Control的max-age覆盖。\n\n     */\n    console.log('===>>>')\n    res.setHeader('Cache-Control', 'private,max-age=' + 1000 * 60 * 60); // 强缓存 静态资源 返回状态码  200 (disk cache)\n    const pathfile = path.join(__dirname, './public/stylesheets/style.css');\n    fs.readFile(pathfile, (error, content) => {\n        res.end(content);\n    })\n});\n\n\n")])]),t("h3",{attrs:{id:"ce-shi-liu-lan-qi-huan-cun-expires"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ce-shi-liu-lan-qi-huan-cun-expires","aria-hidden":"true"}},[n._v("¶")]),n._v(" 测试浏览器缓存（ expires ）")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// expires 设置缓存\napp.get('/*.css', function(req, res) {\n    /**\n     *  @title 设置缓存 (在HTTP/1.0)\n     *  @private 在服务器设置了private比如Cache-Control: private , max-age=60的情况下，\n     表示只有用户的浏览器可以缓存private响应，不允许任何中继Web代理对其进行缓存\n     *  @public 如果设置了public，表示该响应可以再浏览器或者任何中继的Web代理中缓存，\n     public是默认值，即Cache-Control: max-age=60等同于Cache-Control: public , max-age=60。\n    *  @Expires Expires 表示存在时间，允许客户端在这个时间之前不去检查（发请求），\n    等同max-age的效果 但是如果同时存在，则被Cache-Control的max-age覆盖。\n\n     */\n    console.log('===>>>')\n    res.setHeader('expires', new Date(Date.now() + 3 * 60 * 1000).toString());\n    const pathfile = path.join(__dirname, './public/stylesheets/style.css');\n    fs.readFile(pathfile, (error, content) => {\n        res.end(content);\n    })\n});\n\n")])]),t("h3",{attrs:{id:"ce-shi-liu-lan-qi-huan-cun-cache-control-he-expires-tong-shi-she-zhi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ce-shi-liu-lan-qi-huan-cun-cache-control-he-expires-tong-shi-she-zhi","aria-hidden":"true"}},[n._v("¶")]),n._v(" 测试浏览器缓存（ Cache-Control 和 expires同时设置 ）")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// Cache-Control 和 expires同时设置\napp.get('/*.css', function(req, res) {\n    /**\n     *  @title 设置缓存 (在HTTP/1.0)\n     *  @private 在服务器设置了private比如Cache-Control: private , max-age=60的情况下，\n     表示只有用户的浏览器可以缓存private响应，不允许任何中继Web代理对其进行缓存\n     *  @public 如果设置了public，表示该响应可以再浏览器或者任何中继的Web代理中缓存，\n     public是默认值，即Cache-Control: max-age=60等同于Cache-Control: public , max-age=60。\n    *  @Expires Expires 表示存在时间，允许客户端在这个时间之前不去检查（发请求），\n    等同max-age的效果 但是如果同时存在，则被Cache-Control的max-age覆盖。\n\n     */\n    console.log('===>>>')\n    res.setHeader('expires', new Date(Date.now() + 3 * 60 * 1000).toString());\n    res.setHeader('Cache-Control', 'private,max-age=' + 1000 * 60 * 60);\n    const pathfile = path.join(__dirname, './public/stylesheets/style.css');\n    fs.readFile(pathfile, (error, content) => {\n        res.end(content);\n    })\n});\n\n/// TIPS: Expires 表示存在时间，允许客户端在这个时间之前不去检查（发请求），\n等同max-age的效果。但是如果同时存在，则被Cache-Control的max-age覆盖。\n")])]),t("h3",{attrs:{id:"xie-shang-huan-cun"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xie-shang-huan-cun","aria-hidden":"true"}},[n._v("¶")]),n._v(" 协商缓存")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// 协商缓存\napp.get('/*.css', function(req, res) {\n    res.setHeader('pragma', 'no-cache'); // 效果通 cache-control: no-cache \n    const pathfile = path.join(__dirname, './public/stylesheets/style.css');\n    // 获取文件信息\n    const ifModifiedSince = req.headers['if-modified-since'];\n    fs.stat(pathfile, (err, stat) => {\n        console.log(req.headers['if-modified-since'] === stat.mtime.toUTCString())\n        if (req.headers['if-modified-since'] === stat.mtime.toUTCString()) {\n            res.writeHead(\"304\", 'no modified')\n            res.end();\n        } else {\n            fs.readFile(pathfile, (error, content) => {\n                res.setHeader('Last-Modified', stat.mtime.toUTCString());\n                res.end(content);\n            });\n        }\n\n    })\n\n});\n\n")])])])}],R={},U=Object(l["a"])(R,M,A,!1,null,null,null),B=U.exports,H=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},K=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("h3",{attrs:{id:"string-hebuffer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-hebuffer","aria-hidden":"true"}},[n._v("¶")]),n._v(" String和Buffer")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// 可以将文件的内容读取到Buffer实例，或者是直接构造Buffer实例。\nvar hello = new Buffer([ 0x68, 0x65, 0x6c, 0x6c, 0x6f ]);\n// Buffer与字符串类似，除了可以用.length属性得到字节长度外，还可以用[index]方式读取指定位置的字节，例如：\nbin[0]; // => 0x68;\n// Buffer与字符串能够互相转化，例如可以使用指定编码将二进制数据转化为字符串：\nhello.toString('utf-8'); // hello\n// 将字符串转换为二进制数据\nvar bin = new Buffer('hello', 'utf-8'); // "),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[n._v("Buffer")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("68")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("65")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("6c")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("6c")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("6f")]),n._v(">")]),n._v("\n\n")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// String和Buffer两者时间的区别\n// String是只读的，并且对字符串的任何修改得到的都是一个新字符串，原字符串保持不变\n// Buffer，可以做指针操作的C语言数组。例如，可以用[index]方式直接修改某个位置的字节\n// 在Buffer中，想要实现Copy的功能需要以下步骤\n// 1. 创建一个新的Buffer实例(一块内存区) 通过.copy方法把原Buffer中的数据复制过\n// Buffer将JS的数据处理能力从字符串扩展到了任意二进制数据。\n\n")])])])}],V={},W=Object(l["a"])(V,H,K,!1,null,null,null),G=W.exports,Q=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},F=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("h3",{attrs:{id:"provide-inject-yong-fa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#provide-inject-yong-fa","aria-hidden":"true"}},[n._v("¶")]),n._v(" provide / inject 用法")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("    // 1. provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。\n    // 2. 这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，\n    // 并在起上下游关系成立的时间里始终生效。\n    // provide 用法\n    // 1.选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性\n    // 传入对象写法\n    provide: {\n        foo: 'bar'\n    }\n    // 函数写法\n    provide () {\n        return {\n        s: 'foo'\n        }\n    }\n\n    // inject 用法\n    // 父级组件提供 'foo'\n    var Provider = {\n    provide: {\n        foo: 'bar'\n    },\n    // ...\n    }\n\n    // 子组件注入 'foo'\n    var Child = {\n    inject: ['foo'],\n    created () {\n        console.log(this.foo) // => \"bar\"\n    }\n    // ...\n    }\n\n")])]),t("h3",{attrs:{id:"shi-xian-provide-inject-ke-jian-ting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shi-xian-provide-inject-ke-jian-ting","aria-hidden":"true"}},[n._v("¶")]),n._v(" 实现 provide / inject 可监听")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// App.vue 组件 (父组件)\nexport default {\n        name: 'electron-xdf',\n        data () {\n            return {\n                asideW: '200px',\n                _path: null\n            };\n        },\n        created () {\n            this._path = this.$route.path;\n        },\n        provide() {\n            return {\n                INFO: this // 传递可响应对象\n            };\n        },\n        methods:{\n            upprovide(){\n                this.asideW = '500px';  // 修改 属性值得变化，可以传递到 子孙后代的任意组件 同时响应变化\n            }\n        }\n    }\n// 子组件\n// 子组件\nexport default {\n        props: {},\n        computed: {},\n        name: 'process-communication',\n        data () {\n            return {\n                count: 0\n            };\n        },\n        inject: ['INFO'],\n        methods: {\n            upprovide(){\n                // 这里修改之后 App.vue 也会响应数据的变化\n                this.INFO.asideW = '200px';\n            }\n        }\n    };\n\n")])]),t("h3",{attrs:{id:"provide-he-inject-can-kao-di-zhi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#provide-he-inject-can-kao-di-zhi","aria-hidden":"true"}},[n._v("¶")]),n._v(" provide 和 inject 参考地址")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("    // https://cn.vuejs.org/v2/api/#provide-inject\n")])]),t("h3",{attrs:{id:"vue-zu-jian-jian-tong-xin-attrs-listeners"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-zu-jian-jian-tong-xin-attrs-listeners","aria-hidden":"true"}},[n._v("¶")]),n._v(" vue组件间通信($attrs, $listeners)")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// juejin.vue 路由组件入口\n// com-one.vue 子组件\n// com-two.vue 子组件\n// 嵌套关系如下： juejin->com-one->com-two\n// 参考地址 https://blog.csdn.net/qq_15253407/article/details/90289421\n")])])])}],I={},Z=Object(l["a"])(I,Q,F,!1,null,null,null),X=Z.exports,Y=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},J=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("p",[n._v("浏览器xhr")])])}],nn={},en=Object(l["a"])(nn,Y,J,!1,null,null,null),tn=en.exports,rn=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},an=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("h3",{attrs:{id:"typescript-shu-ju-lei-xing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-shu-ju-lei-xing","aria-hidden":"true"}},[n._v("¶")]),n._v(" Typescript 数据类型")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// 基础类型\n// 布尔值\nlet isDonen: boolean = false;\nconsole.log('布尔值:', isDonen);\n\n// 数字类型\nlet decLiteral: number = 6;\nconsole.log('数字类型:', decLiteral);\n\n// 字符串\nlet nameStr: string = \"bob\";\nnameStr = \"smith\";\nconsole.log('字符串:', nameStr);\n\n// 数组 \nlet listArr: number[] = [1, 2, 3];\nlet ligsArr: Array"),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[n._v("number")]),n._v(">")]),n._v(" = [2, 3, 4];\nconsole.log('数组:', listArr, '==>>', ligsArr);\n\n// 元组 Tuple(元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同)\nlet tupArr: [string, number];\ntupArr = ['23', 34];\nconsole.log('元组:', tupArr);\n\n// 枚举(枚举类型可以为一组数值赋予友好的名字。)\n\nenum Color1 { Red, Green, Blue }\nlet c: Color1 = Color1.Green;\n\nconsole.log('枚举：', Color1);\n\n//枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到Color里的哪个名字，\n\nenum Color { Red = 1, Green, Blue };\nlet colorName: string = Color[2];\nconsole.log('colorName:', colorName);\n\n\n// Any (在不知道变量属于上述什么类型的时候，可以定义为Any类型)(在对现有代码进行改写的时候，\n// any类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查)\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\";\nnotSure = false; // okay, definitely a boolean\nlet listArrAny: any[] = [1, true, \"free\"];\n\nconsole.log('Any:', notSure, listArrAny);\n\n// Void 当一个函数没有返回值的时候\n\nfunction TEST(name: string): void {\n    console.log('Void', name)\n}\n\n// 声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null\nlet nuTEst: void = null;\n\n// Null 和 Undefined(undefined和null两者各自有自己的类型分别叫做undefined和null)\n\n// Never(never类型表示的是那些永不存在的值的类型)\n// 返回never的函数必须存在无法达到的终点\n\nfunction errorNever(message: string): never {\n    throw new Error(message);\n}\n\nconsole.log('errorNever', '返回never的函数必须存在无法达到的终点')\n\n// Object object表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。\n\n\n/**\n * @title 类型断言\n * @desc 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构\n * @result 它没有运行时的影响，只是在编译阶段起作用\n * @method 1. "),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("<>")]),n._v(" 2. as\n */\n// 用法一\nlet someValue: any = '我是一个字符串';\n// 在这里将someValue的 'any' 类型, 转换为 'string' 类型, 使用 '"),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("<>")]),n._v("'语法\nlet lenStr: number = ("),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[n._v("string")]),n._v(">")]),n._v("someValue).length;\n\n// 进行类型转换 使用as语法\nlet lenStr1: number = (someValue as string).length;\n\n\n")])]),t("h3",{attrs:{id:"typescript-lei"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-lei","aria-hidden":"true"}},[n._v("¶")]),n._v(" Typescript 类")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("// ts 类\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter = new Greeter(\"world\");\n\n\n\n\n\n/**\n * @class Animal\n * @public 公共变量(在当前类和派生的子类中都可以使用)\n * @private 私有变量(不能在声明它的类的外部访问 只能在当前类中使用)\n * @protected 受保护的(可以在当前类和派生类中使用，当构造函数使用protected修饰的时候 该类只能被继承)\n */\nclass Animal {\n    move(distanceInMeters: number = 0) {\n        console.log(`Animal moved ${distanceInMeters}m.`);\n    }\n}\n\nclass Dog extends Animal {\n    bark() {\n        console.log('Woof! Woof!');\n    }\n}\n\nconst dog = new Dog();\ndog.bark();\ndog.move(10);\ndog.bark();\n\nclass AnimalNew {\n    // 在TS类中 属性 方法 构造函数 默认使用public\n    public name: string;\n    private age: number; // 当成员被标记成 private时，它就不能在声明它的类的外部访问 只能在当前类中使用\n    protected email: string;\n    public constructor(theName: string, age?: number) {\n        this.name = theName;\n        this.age = age;\n    }\n    public move(distanceInMeters: number) {\n        console.log(`${this.name} moved ${distanceInMeters}m.age is ${this.age}`);\n    }\n}\n\n// 属性值 xdfc 只能访问 name 和 move\nconst xdfc = new AnimalNew('zyn', 78);\n//  xdfc.age 是不可以访问的\n\nclass Persin extends AnimalNew {\n    public constructor(name: string, age?: number) {\n        super(name, age);\n    }\n    public getElevatorPitch() {\n        // 访问父类 受保护的属性  email 和 公共的属性 name  但是不可以访问 age(私有变量)\n        return `Hello, my name is ${this.name} and I work in ${this.email}.`;\n    }\n}\n\nconst persinH = new Persin('ok');\n\n// 创建只能被继承的类\n\nclass Quanyecha {\n    protected name: string;\n    static obj: object = { age: 45 };\n    protected constructor(name: string) {\n        this.name = name;\n    }\n\n    public say() {\n        // 调用当前类中的静态方法 和属性\n        Quanyecha.goodSay();\n    }\n    private sayPri() { }\n    protected sayPro() { }\n    static goodSay(): object {\n        return Quanyecha.obj;\n    }\n}\n\nclass Shashengwan extends Quanyecha {\n    public constructor(name: any) {\n        super("),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[n._v("string")]),n._v(">")]),n._v('name) // 使用断言转换类型\n    }\n    public init() {\n        this.makeinstall();\n    }\n    private makeinstall() {\n        Quanyecha.goodSay(); // 子类中访问父类的静态方法\n        this.say(); // 访问父类中的 公共方法\n        this.sayPro(); // 访问父类中的 受保护的方法 只能在子类的内部使用\n        console.log(`${this.name}`) // 访问 父类中的 受保护的属性\n    }\n}\n\n// 上述类 构造函数使用了(protected)修饰不能直接使用 new 实例化该类\n// const ali = new Quanyecha(\'\') // error  类“Quanyecha”的构造函数是受保护的，仅可在类声明中访问。\n\nconst xiejian = new Shashengwan(\'anj\');\nxiejian.init(); // xiejian 只能调用 子类 和父类中的 public 修饰的属性和方法\nxiejian.say();\n\n\n// readonly修饰符 （ 只读属性必须在声明时或构造函数里被初始化。）\n\nclass Octopus {\n    readonly name: string;\n    readonly numberOfLegs: number = 8; // 声明时 初始化\n    constructor(theName: string) {\n        this.name = theName; // 在构造函数中初始化\n    }\n}\n\nlet dad = new Octopus("Ma");\nconsole.log(`只能读取属性不能进行在赋值的操作:${dad.name},${dad.numberOfLegs}`);\n\n\n// 可以借助 readonly 将构造函数中的声明和赋值简写\nclass Octopus1 {\n    constructor(readonly name: string) { }\n\n}\nlet dad1 = new Octopus1("Ma");\nconsole.log(dad1.name) // \n\n\n// 存取器\n\nclass Employee {\n    fullName: string;\n}\n// 下面 展示 实例对象可以随意修改 public 修饰的属性的值,\nlet employee = new Employee();\nemployee.fullName = "Bob Smith";\nif (employee.fullName) {\n    console.log(employee.fullName);\n}\n\n\nlet passcode = "secret passcode";\n\nclass Employee1 {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode == "secret passcode") {\n            this._fullName = newName;\n        }\n        else {\n            console.log("Error: Unauthorized update of employee!");\n        }\n    }\n}\n\nlet employee1 = new Employee1();\nemployee1.fullName = "Bob Smith";\nif (employee1.fullName) {\n    alert(employee1.fullName);\n}\n\n\n// 抽象类 (抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化)\nabstract class Department3 {\n\n    constructor(public name: string) {\n    }\n\n    printName(): void {\n        console.log(\'Department name: \' + this.name);\n    }\n\n    abstract printMeeting(): void; // 必须在派生类中实现\n}\n\nclass AccountingDepartment extends Department3 {\n\n    constructor() {\n        super(\'Accounting and Auditing\'); // 在派生类的构造函数中必须调用 super()\n    }\n\n    printMeeting(): void {\n        console.log(\'The Accounting Department meets each Monday at 10am.\');\n    }\n\n    generateReports(): void {\n        console.log(\'Generating accounting reports...\');\n    }\n}\n\nlet department: Department3; // 允许创建一个对抽象类型的引用\n// department = new Department(); // 错误: 不能创建一个抽象类的实例\ndepartment = new AccountingDepartment(); // 允许对一个抽象子类进行实例化和赋值\ndepartment.printName();\ndepartment.printMeeting();\n// department.generateReports(); // 错误: 方法在声明的抽象类中不存在\n\n// 把类当做接口使用\nclass Point {\n    x: number;\n    y: number;\n}\n\ninterface Point3d extends Point {\n    z: number;\n}\n\nlet point3d: Point3d = { x: 1, y: 2, z: 3 };\n\n')])]),t("h3",{attrs:{id:"typescript-zhuang-shi-qi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-zhuang-shi-qi","aria-hidden":"true"}},[n._v("¶")]),n._v(" Typescript 装饰器")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v('// ts 装饰器\n// 随着TypeScript和ES6里引入了类，在一些场景下我们需要额外的特性来支持标注或修改类及其成员\n// 装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上\n// expression求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。\n\nfunction color(value: string) { // 这是一个装饰器工厂\n    return function (target) { //  这是装饰器\n        // do something with "target" and "value"...\n    }\n}\n\n\n\n/// 装饰器 demo\n\nfunction f() {\n    // 装饰器需要返回一个函数\n    console.log(`f(), index = 1`);\n    return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(`f(), index = 2`);\n    }\n}\n\nfunction g() {\n    console.log(`g(), index = 1`);\n    return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(`g(), index = 2`);\n    }\n}\n\n\n\n\nclass DECTEST {\n    @f()\n    @g()\n    method() { }\n}\n\n\n/// 类装饰器\n\n/**\n * 类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。 类装饰器不能用在声明文件中( .d.ts)，也不能用在任何外部上下文中（比如declare的类）\n * 类装饰器表达式会在运行时当作函数被调用，类的构造函数作为其唯一的参数。\n */\n\n// 创建一个类@sealed装饰器\n\n/// 会将使用该装饰器的类的构造函数传入\nfunction sealed(constructor: Function) {\n    //console.log(\'类装饰器输出参数:\', constructor) //  function GreeterOK(message) { this.greeting = message;}\n    Object.seal(constructor);\n    Object.seal(constructor.prototype);\n}\n\n@sealed  // 当@sealed被执行的时候，它将密封此类的构造函数和原型\nclass GreeterOK {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return "Hello, " + this.greeting;\n    }\n}\n\n\nconst Zyn = new GreeterOK(\'test\');\nZyn.greet();\n\n\nfunction classDecorator'),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[n._v("T")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("extends")]),n._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("new")]),n._v("("),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("...args:")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("any")]),n._v("[])"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v(":")]),n._v(" {} }>")]),n._v('(constructor: T) {\n    console.log(typeof constructor, \'T\')\n    return class extends constructor {\n        newProperty = "new property";\n        hello = "override";\n    }\n}\n\n@classDecorator\nclass Greeter5 {\n    property = "property";\n    hello: string;\n    constructor(m: string) {\n        this.hello = m;\n    }\n}\nconst QQ = new Greeter5("world")\nconsole.log(QQ.hello, QQ.property);\n\n\n\n// 方法装饰器\n/**\n * 它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义\n * 方法装饰器表达式会在运行时当作函数被调用，传入下列3个参数：\n *  1.对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。\n *  2.成员的名字。\n *  3.成员的属性描述符。\n * 注意  如果代码输出目标版本小于ES5，属性描述符将会是undefined。\n * 如果方法装饰器返回一个值，它会被用作方法的属性描述符。\n **/\n\n/**\n * @param {boolean} value\n * @returns function\n */\nfunction enumerable(value: boolean) {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(target, propertyKey, descriptor, value);\n        if (descriptor) {\n            descriptor.enumerable = value;\n        }\n\n    }\n}\n\nclass Greeter9 {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    @enumerable(false)\n    greet() {\n        return "Hello, " + this.greeting;\n    }\n}\n\nconst kk9 = new Greeter9(\'enm\')\nconsole.log(kk9.greet());\n\n\n// 属性装饰器\n/**\n * 1.对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。\n * 2.成员的名字。\n */\n\n// import * as Reflect from "reflect-metadata";\n\nconst formatMetadataKey = Symbol("format");\n\nfunction format(formatString: string) {\n    return Reflect.metadata(formatMetadataKey, formatString);\n}\n\nfunction getFormat(target: any, propertyKey: string) {\n    return Reflect.getMetadata(formatMetadataKey, target, propertyKey);\n}\n\n')])]),t("h3",{attrs:{id:"typesacipt-mei-ju"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typesacipt-mei-ju","aria-hidden":"true"}},[n._v("¶")]),n._v(" Typesacipt枚举")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v('// ts 枚举  TypeScript支持数字的和基于字符串的枚举。\n\n/**\n * @enum {number}\n * @des  Up使用初始化为 1。 其余的成员会从 1开始自动增长 Direction.Up的值为 1， Down为 2， Left为 3， Right为 4。\n */\nenum Direction {\n    Up = 1,\n    Down,\n    Left,\n    Right\n}\n// 默认不使用初始化的时候 下标默认从0 开始\nenum Direction1 {\n    Up,\n    Down,\n    Left,\n    Right,\n}\n\nenum Responsec {\n    No = 0,\n    Yes = 1\n}\nfunction respond(recipient: string, message: Responsec): void {\n    // ...\n    console.log(`recipient: ${recipient}, message:${message}`)\n}\n\nrespond("Princess Caroline", Responsec.Yes)\n\nconsole.log(`Direction1: ${Direction1.Up}`);\n\nconsole.log(`Direction: ${Direction.Up}`);\n\nconsole.warn(\'=======字符串枚举========>>>>>\')\n\n// 字符串枚举\nenum Direction3 {\n    Up = "UP",\n    Down = "DOWN",\n    Left = "LEFT",\n    Right = "RIGHT",\n}\n\nconsole.log(`Direction3:${Direction3.Up}`);\n\n\nconsole.warn(\'=======异构枚举（字符串和数字混合）======>>>\')\n// 下面的方式可以但是不推荐\nenum BooleanLikeHeterogeneousEnum {\n    No = 0,\n    Yes = "YES",\n}\n\n\n\n')])]),t("h3",{attrs:{id:"lei-xing-tui-lun-ji-lei-xing-shi-zai-na-li-ru-he-bei-tui-duan-de."}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lei-xing-tui-lun-ji-lei-xing-shi-zai-na-li-ru-he-bei-tui-duan-de.","aria-hidden":"true"}},[n._v("¶")]),n._v(" 类型推论 即，类型是在哪里如何被推断的。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("\n// 类型推论 即，类型是在哪里如何被推断的。\n\n// 量x的类型被推断为数字。 这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时\nlet x = 3;\n\nclass AnimalType {\n    // readonly name: string 会默认初始化 name => this.name = name;\n    protected constructor(protected readonly name: string) { }\n    protected say() {\n        console.log(`AnimalType say: ${this.name}`)\n    }\n}\n\nclass Rhino extends AnimalType {\n    constructor(protected name: string) {\n        super(name);\n    }\n\n    public stratSay() {\n        super.say();\n        this.say();\n    }\n}\n\n\nclass GOD {\n\n}\n\nconst nj = new Rhino('gogo');\nnj.stratSay()\n\nconst zoo: AnimalType[] = [new Rhino('yu')];\n\n\n\n// 类型兼容性\ninterface Named {\n    name: string;\n}\n\nclass Person {\n    name: string;\n}\n\nlet p: Named;\n// OK, because of structural typing\np = new Person();\n\n")])]),t("h3",{attrs:{id:"typescript-zhu-jie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-zhu-jie","aria-hidden":"true"}},[n._v("¶")]),n._v(" Typescript注解")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("    // test-descriptor.ts\n/**\n * 1.注解(装饰器)是一类特殊类型的声明，可以用在类、方法、构造器、属性和参数上。\n * 2.其实本质上，定义一个注解，就是定义一个TypeScript方法，只是该方法必须符合官方的规范。\n * 3.方法分别返回符合规范的函数闭包，参数target、propertyKey、descriptor。经测试，\n * 这三个参数中target和propertyKey是必须的，没有的话编译过不去，descriptor可以省略\n **/\n\nfunction validateK(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    // console.log('changeName befor')\n    // console.log(`target:${JSON.stringify(target)}, propertyKey:${propertyKey}, descriptor: ${descriptor.value}`);\n    let saveRun = descriptor.value; // 保存原来函数\n    descriptor.value = function () {\n        // console.log('changeName 装饰器重写');\n    }\n    descriptor.value(); // 执行重写函数\n    saveRun(); // 执行原保存changeName方法\n    // console.log('changeName after');\n}\n\nclass UserKK {\n    // 调用装饰器\n    @validateK\n    changeName() {\n        console.log('changeName')\n    }\n}\n\n\nfunction Zynhello() {\n    console.log(\"Zynworld(): 加载.\");\n    return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(\"Zynworld(): 执行.\");\n    }\n}\n\nfunction Zynworld() {\n    console.log(\"Zynworld(): 加载.\");\n    return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(\"Zynworld(): 执行.\");\n    }\n}\n\nclass Main {\n\n    @Zynhello()\n    @Zynworld()\n    method() {\n        console.log('method(): 执行.');\n    }\n}\n\n// 上述输出结果如下\n\n\n\n/**\n * @title 类注解\n * @dec 类注解应用于类的构造函数，可以使用它去观察、修改或替换类的定义\n **/\n// 下面方法拆解\n/*\nfunction classDecoratorQ"),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[n._v("T")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("extends")]),n._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("new")]),n._v("("),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("...args:")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("any")]),n._v("[])"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v(":")]),n._v(" {} }>")]),n._v("(constructor: T) {\n    return class extends constructor {\n        message = 'Decorator';\n    }\n}\n*/\ninterface Constructor { // 定义一个接口\n    new(...args: any[]): {} // 创建一个函数 参数数组类型\n}\n// T(泛型)继承接口 Constructor\n/**\n * @link https://www.tslang.cn/docs/release-notes/typescript-2.2.html\n * @template T 泛型变量\n * @param {T} constructor // 传入PersonLP的构造函数\n * @returns \n */\nfunction classDecoratorQ"),t("span",{pre:!0,attrs:{class:"hljs-tag"}},[n._v("<"),t("span",{pre:!0,attrs:{class:"hljs-name"}},[n._v("T")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("extends")]),n._v(" "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[n._v("Constructor")]),n._v(">")]),n._v("(constructor: T) {\n    return class extends constructor {\n        message = 'Decorator';\n    }\n}\n\n\n@classDecoratorQ\nclass PersonLP {\n\n    message: string;\n\n    constructor(message: string) {\n        this.message = message;\n    }\n\n    greet() {\n        console.log(`Hello ${this.message} !`);\n    }\n}\n\nconst person = new PersonLP('World');\nperson.greet();\n\n// print: Hello Decorator(覆盖掉了原来的构造函数。)\n\n\n// 属性装饰器\nfunction enumerable(value: boolean) {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        descriptor.enumerable = value; // 将函数 greet 的变成不可枚举的 \n    };\n}\n\nclass ZYN {\n    message: string;\n\n    constructor(message: string) {\n        this.message = message;\n    }\n\n    @enumerable(false)\n    greet() {\n        console.log(`Hello ${this.message} !`);\n    }\n}\nconst zyn = new ZYN('World');\nfor (const property in zyn) {\n    console.log(property);\n}\nzyn.greet();\n\n\n")])]),t("h3",{attrs:{id:"typescript-interface-hetype-qu-bie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-interface-hetype-qu-bie","aria-hidden":"true"}},[n._v("¶")]),n._v(" typeScript interface和type区别")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("    // ts 自定义类型\n// interface 参考资料 ----\x3e https://www.tslang.cn/docs/handbook/interfaces.html\n/**\n * Interface(接口) vs Type alias(类型别名)\n * 相同点-> 都可以描述一个对象或者函数\n *      -> 都允许拓展（extends）\n *      ---\x3e> interface extends interface (接口继承接口)\n *      ---\x3e> type extends type (类型继承类型)\n *      ---\x3e> interface extends type (接口继承类型)\n *      ---\x3e> // type extends interface (类型继承接口)\n */\n// interface\ninterface UserOP {  // 描述一个对象\n    name: string;\n    email: string;\n    isBig: boolean;\n    age: number;\n}\n\ninterface SetUser { // 描述一个函数\n    (name: string, email: string, isBig: boolean, age: number): UserOP;\n}\n\nlet pikaqiu: UserOP; // 创建一个变量是 UserOP的类型\npikaqiu = { name: 'zyn', email: 're', isBig: false, age: 34 }\n\nlet mySearchXX: SetUser; // 用来描述一个方法\nmySearchXX = function (name: string, email: string, isBig: boolean, age: number): UserOP {\n    return pikaqiu;\n}\n\n// type\n\ntype UserTy = {\n    name: string\n    age: number\n};\n\ntype SetUserTy = (name: string, age: number) => void;\n\nlet pikaqiu1: UserTy;\npikaqiu1 = { name: 'zyn', age: 54 };\n\nlet mySearchXXTy: SetUserTy;\nmySearchXXTy = function (name: string, age: number) {\n\n}\n\n// interface extends interface (接口继承接口)\n\n// 1. interface 属性继承\ninterface dudu1 {\n    name: string\n}\n\ninterface dudu2 extends dudu1 {\n    age: number\n}\n\nconst duduTest: dudu2 = { name: 'zyb', age: 23 };\n\n\n\n// type extends type (类型继承类型)\n\ntype Nametype = {\n    name: string;\n}\ntype UserType = Nametype & { age: number };\nconst valueType: UserType = { name: 'zyb', age: 23 };\n\n// interface extends type (接口继承类型)\n\ntype LulvwaType = {\n    name: string\n}\n\ninterface LulvwaFace extends LulvwaType {\n    age: number;\n}\n\nconst LulvwaValue: LulvwaFace = { name: 'zyb', age: 23 };\n\n// type extends interface (类型继承接口)\n\ninterface shajFace {\n    name: string\n}\n\ntype shajType = shajFace & {\n    age: number;\n}\nconst shajValue: shajType = { name: 'zyb', age: 23 };\n\n\n/**\n * Interface(接口) vs Type alias(类型别名)\n * 不同点-> type 可以而 interface 不行\n *      -----\x3e type 可以声明基本类型别名，联合类型，元组等类型\n *      -> interface 可以而 type 不行\n *      -----\x3e interface 能够声明合并\n */\n\n// 基本类型别名\ntype DiffName = string;\n\n// 联合类型\ninterface Dog {\n    wong();\n}\ninterface Cat {\n    miao();\n}\n\ntype Pet = Dog | Cat\n\n// 元祖类型\ntype PetList = [Dog, Pet]\n\n// interface 能够声明合并\n\ninterface DiffLx {\n    name: string\n}\ninterface DiffLx {\n    age: number\n}\ninterface DiffLx {\n    sex: string\n}\n\n// 合并后的结果\n/*\ninterface DiffLx {\n    name: string\n    age: number\n    sex: string\n}\n*/\nconst DiffLxValue: DiffLx = { name: '34', age: 34, sex: 'nv' }\n\n")])])])}],sn={},on=Object(l["a"])(sn,rn,an,!1,null,null,null),ln=on.exports;function cn(n,e){return{title:n.split("/")[0],docs:e,name:n.split("/")[1]}}var pn=[cn("javascript工具类集合/javascript",E),cn("前端数据校验/schema",m),cn("语法检查/eslintrc",j),cn("Vue构建优化/dllReferencePlugin",b["default"]),cn("element遇到问题/element",z),cn("cache(缓存)/浏览区缓存",L),cn("express框架/express",B),cn("nodejs记录/nodejs",G),cn("vue遇到问题记录/vue",X),cn("xhr状态解析/xhr",tn),cn("typescript记录/typescript",ln)],un=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"demo-block"},[t("div",{staticClass:"demo-block-source"},[n._t("source"),n.$slots.default?n._e():t("span",{staticClass:"demo-block-code-icon",on:{click:function(e){n.showCode=!n.showCode}}},[n.showCode?t("span",[n._v("收起代码")]):t("span",[n._v("查看代码")])])],2),n.$slots.default?t("div",{staticClass:"demo-block-meta"},[n._t("default"),n.$slots.default?t("span",{staticClass:"demo-block-code-icon",on:{click:function(e){n.showCode=!n.showCode}}},[n.showCode?t("span",[n._v("收起代码")]):t("span",[n._v("查看代码")])]):n._e()],2):n._e(),t("div",{directives:[{name:"show",rawName:"v-show",value:n.showCode,expression:"showCode"}],staticClass:"demo-block-code"},[n._t("highlight")],2)])},hn=[],dn={name:"DemoBlock",data:function(){return{showCode:!1}}},gn=dn,mn=Object(l["a"])(gn,un,hn,!1,null,null,null),vn=mn.exports;r["a"].config.productionTip=!1,r["a"].component("demo-block",vn),window.$ViewList=[],pn.forEach(function(n){var e=n.docs,t=n.title,a=n.name,s=a.replace(/(\w)/,function(n){return n.toUpperCase()});r["a"].component("zyn-"+s,e),window.$ViewList.push({title:t,docs:"zyn-"+s}),console.warn("当前文档组件注册：","zyn-"+s)}),new r["a"]({render:function(n){return n(p)}}).$mount("#app"),screenTop},"5c0b":function(n,e,t){"use strict";var r=t("5e27"),a=t.n(r);a.a},"5e27":function(n,e,t){},b58c:function(n,e,t){"use strict";var r=t("f297"),a=t("cb5c"),s=t("2877"),i=Object(s["a"])(a["default"],r["a"],r["b"],!1,null,null,null);e["default"]=i.exports},cb5c:function(n,e,t){"use strict";var r=t("ebe0"),a=t.n(r);e["default"]=a.a},ebe0:function(n,e){},f297:function(n,e,t){"use strict";var r=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},a=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("h2",{attrs:{id:"dllplugin-dllreferenceplugin-ti-gao-gou-jian-su-du"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dllplugin-dllreferenceplugin-ti-gao-gou-jian-su-du","aria-hidden":"true"}},[n._v("¶")]),n._v(" DllPlugin DllReferencePlugin提高构建速度")]),t("h3",{attrs:{id:"package.json-pei-zhi-xin-xi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#package.json-pei-zhi-xin-xi","aria-hidden":"true"}},[n._v("¶")]),n._v(" package.json 配置信息")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v('{\n  "name": "xxx",\n  "version": "0.1.0",\n  "private": true,\n  "scripts": {\n    "dll": "webpack -p --progress --config ./webpack.dll.conf.js" // 添加动态库构建命令\n  },\n  "dependencies": {\n   \n  },\n  "devDependencies": {\n   \n  },\n  "dllPath": "public/vendor" // 打包之后文件输出目录\n}\n\n')])]),t("h3",{attrs:{id:"xiang-mu-gen-lu-jing-tian-jia-wen-jian-webpack.dll.conf.js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xiang-mu-gen-lu-jing-tian-jia-wen-jian-webpack.dll.conf.js","aria-hidden":"true"}},[n._v("¶")]),n._v(" 项目根路径添加文件 webpack.dll.conf.js")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("/**\n * Created by zyn on 2019/5/10.\n */\nconst path = require('path');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst package = require('./package.json');\n\nconst dllPath = package.dllPath;\n\nmodule.exports = {\n    entry: {\n        // 需要提取的库文件 避免每次 npm run build 重新打包一下文件\n        vendor: ['vue', 'vue-router', 'vuex', 'axios', 'element-ui', 'html2canvas', 'vconsole', 'vue-axios', 'v-viewer']\n    },\n    output: {\n        path: path.join(__dirname, dllPath), // 配置打包文件的输出路径\n        filename: 'xdf.[name].dll.[hash:8].js', // 设置打包后的文件名称\n        library: '[name]_[hash]'\n    },\n    plugins: [\n        new CleanWebpackPlugin(), // https://www.npmjs.com/package/clean-webpack-plugin\n        new webpack.DllPlugin({ // https://webpack.js.org/plugins/dll-plugin/#root\n            path: path.join(__dirname, dllPath, '[name]-manifest.json'),\n            name: '[name]_[hash]',\n            context: process.cwd() // 当前工作目录\n        }),\n        new webpack.optimize.UglifyJsPlugin({\n            compress: {\n                warnings: false\n            }\n        })\n    ]\n};\n\n")])]),t("h3",{attrs:{id:"pei-zhi-vue.config.js-tian-jia-gou-jiandll-ku-wen-jian-zhi-hou-zi-dong-cha-ru-daohtml-zhong"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pei-zhi-vue.config.js-tian-jia-gou-jiandll-ku-wen-jian-zhi-hou-zi-dong-cha-ru-daohtml-zhong","aria-hidden":"true"}},[n._v("¶")]),n._v(" 配置 vue.config.js 添加构建dll库文件之后自动插入到html中")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("const dllPath = './' + package.dllPath;\nconst linkPath = '/' + package.dllPath.split('/')[1]; // 引入文件的路径 （非 './'）\n\nconfigureWebpack: config => {\n        if (process.env.NODE_ENV === 'development') {\n            config.devtool = 'source-map';\n            // mutate config for production...\n        } else {\n            config.plugins.push(\n                new webpack.DllReferencePlugin({\n                    context: process.cwd(),\n                    manifest: require(dllPath + '/vendor-manifest.json')\n                })\n            );\n            config.plugins.push(\n                new AddAssetHtmlPlugin({\n                    // dll文件位置\n                    filepath: path.resolve(__dirname, dllPath + '/*.js'),\n                    // dll 引用路径\n                    publicPath: linkPath,\n                    // dll最终输出的目录\n                    outputPath: linkPath\n                })\n            );\n        }\n    }\n")])]),t("h3",{attrs:{id:"zhi-xing-gou-jian-dong-tai-ku-wen-jian"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zhi-xing-gou-jian-dong-tai-ku-wen-jian","aria-hidden":"true"}},[n._v("¶")]),n._v(" 执行构建动态库文件")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("    // 执行\n        npm run dll\n    // 产生文件路径\n        /public/vendor/vendor-manifest.json\n        /public/vendor/xdf.vendor.dll.3f37d038.js\n    // 上述配置 更改提取或添加库重新 构建   \n")])]),t("h3",{attrs:{id:"vue-ci3-zi-ding-yi-dai-ma-fen-ge-fang-shi-vue.config.js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-ci3-zi-ding-yi-dai-ma-fen-ge-fang-shi-vue.config.js","aria-hidden":"true"}},[n._v("¶")]),n._v(" vue-ci3 自定义代码分割方式 （vue.config.js）")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"hljs language-html"}},[n._v("/**\n* @link https://webpack.js.org/plugins/split-chunks-plugin/#root\n* @type {{splitChunks: {cacheGroups: {xdfsdk: {name: string, test: RegExp, priority: number, chunks: string}}}}}\n* @priority 优先执行权重  chunk-vendors: -10  chunk-common: -20\n* @chunks initial(初始块)、async(按需加载块)、all(全部块)\n*/\nconfigureWebpack: config=> {\n    config.optimization = {\n        splitChunks: {\n            cacheGroups: {\n                vendors: {\n                    name: `chunk-vendors`,\n                    test: /[\\\\/]node_modules[\\\\/]/,\n                    priority: -10,\n                    chunks: 'initial'\n                },\n                common: {\n                    name: `chunk-common`,\n                    minChunks: 2,\n                    priority: -20,\n                    chunks: 'initial',\n                    reuseExistingChunk: true\n                },\n                xdfsdk: {\n                    name: 'xdf-sdk-config',\n                    test: /xdf-sdk/,\n                    minChunks: 1,\n                    minSize: 0,\n                    chunks: 'async',\n                    priority: 60,\n                    reuseExistingChunk: true\n                }\n            }\n        }\n    }\n}\n\n")])])])}];t.d(e,"a",function(){return r}),t.d(e,"b",function(){return a})}});